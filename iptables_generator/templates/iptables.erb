#!/bin/bash

IP_HOST=<%= machine.ipaddress %>

# the public IP is the same as the host IP
IP_WWW=$IP_HOST

<%
proxies = machine.list_installed_vms.select do |vm|
  vm["name"] == "proxy"
end
has_proxy = proxies.size > 0  
proxy = proxies.first if has_proxy
%>

<% if has_proxy %>
IP_PRIVATE_PROXY=<%= proxy["ipaddress"] %>
<% end %>

MASK_INTERNAL_COMPLETE=10.0.0.0/8
MASK_INTERNAL=10.60.0.0/16

IF_PUBLIC=eth0

# delete existing rules
iptables -F
iptables -X

# delete existing nat rules
iptables -t nat -F
iptables -t nat -X

# default policy is drop
iptables -P INPUT   DROP
iptables -P FORWARD DROP
iptables -P OUTPUT  DROP

echo -stateful-

iptables -A INPUT   -m state --state ESTABLISHED,RELATED -j ACCEPT
iptables -A OUTPUT  -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT
iptables -A FORWARD -m state --state ESTABLISHED,RELATED -j ACCEPT

echo -spoofing-

iptables -A INPUT -i eth0  -s 10.0.0.0/8 -j DROP
iptables -A INPUT -i eth0  -s 172.16.0.0/12 -j DROP
iptables -A INPUT -i eth0  -s 192.168.0.0/16 -j DROP
#iptables -A INPUT -i eth0 -m state --state INVALID -j DROP
#iptables -A OUTPUT -o eth0 -m state --state INVALID -j DROP
#iptables -A FORWARD -i eth0 -m state --state INVALID -j DROP

echo -pre-routing-

# forward all http(s) traffic to proxy
<% if has_proxy %>
iptables -t nat -A PREROUTING  -p tcp  -d $IP_HOST --dport 80  -j DNAT --to-destination $IP_PRIVATE_PROXY:80
iptables -t nat -A PREROUTING  -p tcp  -d $IP_HOST --dport 443 -j DNAT --to-destination $IP_PRIVATE_PROXY:443
<% end %>

<% machine.list_installed_vms.each do |vm| %>
iptables -t nat -A PREROUTING  -p tcp  -d $IP_HOST --dport <%= vm["ssh_port"] %>  -j DNAT --to-destination <%= vm["ipaddress"] %>:22
<% end %>

<% machine.list_vms.each do |vm| 
  next unless vm["state"] == "running"
%>  
  

<% end %>

echo -post-routing-

iptables -t nat -A POSTROUTING -s $MASK_INTERNAL -o eth0 ! -d 10.0.0.0/8 -j SNAT --to $IP_WWW

echo -input / output-

##localhost
iptables -A INPUT -s 127.0.0.1 -d 127.0.0.1 -j ACCEPT
iptables -A OUTPUT -d 127.0.0.1 -s 127.0.0.1 -j ACCEPT

## SSH ##
iptables -A INPUT -p tcp --dport 22 -m state --state NEW -j ACCEPT
iptables -A INPUT -p tcp --dport 2042 -m state --state NEW -j ACCEPT
iptables -A INPUT -p tcp --dport 2242 -m state --state NEW -j ACCEPT

## Bestimmte ICMP-Pakete erlauben ## 
iptables -A INPUT -p icmp --icmp-type echo-reply -j ACCEPT
iptables -A OUTPUT -p icmp --icmp-type echo-reply -j ACCEPT
iptables -A INPUT -p icmp --icmp-type destination-unreachable -j ACCEPT
iptables -A OUTPUT -p icmp --icmp-type destination-unreachable -j ACCEPT
iptables -A INPUT -p icmp --icmp-type source-quench -j ACCEPT
iptables -A INPUT -p icmp --icmp-type echo-request -j ACCEPT
iptables -A OUTPUT -p icmp --icmp-type echo-request -j ACCEPT
iptables -A INPUT -p icmp --icmp-type time-exceeded -j ACCEPT
iptables -A INPUT -p icmp --icmp-type parameter-problem -j ACCEPT

## Fragmentierte ICMP-Pakete blockieren ##
iptables -A INPUT -p icmp --fragment -j LOG
iptables -A INPUT -p icmp --fragment -j DROP

## NETBIOS-DROP ## 
iptables -A INPUT -p udp --dport netbios-ns -j DROP
iptables -A INPUT -p udp --dport netbios-dgm -j DROP
iptables -A INPUT -p tcp --dport netbios-ssn -j DROP
iptables -A INPUT -p tcp --dport 135 -j DROP
iptables -A INPUT -p tcp --dport 445 -j DROP

## PCsync DROP ##
iptables -A INPUT -p tcp --dport 8443 -j DROP


## INPUT LOG & DROP ##
iptables -A INPUT -p tcp -m limit --limit 5/min -j LOG --log-level debug --log-prefix "!INPUT_DROP! ** TCP **  "
iptables -A INPUT -p udp -m limit --limit 5/min -j LOG --log-level debug --log-prefix "!INPUT_DROP! ** UDP **  "
iptables -A INPUT -p icmp -m limit --limit 5/min -j LOG --log-level debug --log-prefix "!INPUT_DROP! ** ICMP **  "
iptables -A INPUT -m pkttype --pkt-type multicast -m limit --limit 5/min -j LOG --log-level debug --log-prefix "!INPUT_DROP! ** MCAST **  "
iptables -A OUTPUT -p tcp -m limit --limit 5/min -j LOG --log-level debug --log-prefix "!OUTPUT_DROP! ** TCP **  "
iptables -A OUTPUT -p udp -m limit --limit 5/min -j LOG --log-level debug --log-prefix "!OUTPUT_DROP! ** UDP **  "
iptables -A OUTPUT -p icmp -m limit --limit 5/min -j LOG --log-level debug --log-prefix "!OUTPUT_DROP! ** ICMP **  "
iptables -A OUTPUT -m pkttype --pkt-type multicast -m limit --limit 5/min -j LOG --log-level debug --log-prefix "!OUTPUT_DROP! ** MCAST **  "



echo -forward-

# !!! only for emergency mode !!!
#iptables -I FORWARD -j ACCEPT

# allow all traffic to be forwarded across the bridges
iptables -A FORWARD -m physdev --physdev-is-bridged -j ACCEPT

<% if has_proxy %>
## allow incoming http traffic to reach the proxy
iptables -A FORWARD -d $IP_PRIVATE_PROXY -p tcp --dport 80 -m state --state NEW -j ACCEPT
iptables -A FORWARD -d $IP_PRIVATE_PROXY -p tcp --dport 443 -m state --state NEW -j ACCEPT

## allow http traffic from the proxy to the other VMs
iptables -A FORWARD -s $IP_PRIVATE_PROXY -d $MASK_INTERNAL -p tcp --dport 80 -j ACCEPT
iptables -A FORWARD -s $IP_PRIVATE_PROXY -d $MASK_INTERNAL -p tcp --dport 443 -j ACCEPT

## allow http traffic from the other VMs back to the proxy
iptables -A FORWARD -s $MASK_INTERNAL -d $IP_PRIVATE_PROXY -p tcp --sport 80 -m state --state NEW -j ACCEPT
iptables -A FORWARD -s $MASK_INTERNAL -d $IP_PRIVATE_PROXY -p tcp --sport 443 -m state --state NEW -j ACCEPT

## outgoing http from proxy
iptables -A FORWARD -s $IP_PRIVATE_PROXY -p tcp --sport 80 -m state --state NEW -j ACCEPT
iptables -A FORWARD -s $IP_PRIVATE_PROXY -p tcp --sport 443 -m state --state NEW -j ACCEPT
<% end %>

## outgoing http from VMs
iptables -A FORWARD -s $MASK_INTERNAL -p tcp --dport 80 -j ACCEPT
iptables -A FORWARD -s $MASK_INTERNAL -p tcp --dport 443 -m state --state NEW -j ACCEPT
iptables -A FORWARD -s $MASK_INTERNAL -p tcp --sport 443 -m state --state NEW -j ACCEPT

## incoming ssh traffic for guests
<% machine.list_installed_vms.each do |vm| %>
iptables -A FORWARD -d <%= vm["ipaddress"] %> -p tcp --dport 22 -m state --state NEW -j ACCEPT
<% end %>

<%
vops = machine.list_installed_vms.select do |vm|
  /^virtualop/.match(vm["name"]) or
  /^vop/.match(vm["name"])
end
%>

<% if vops.size > 0 
     vops.each do |vop|
%>
## allow outgoing traffic to all sorts of destination ports for virtualop instances
iptables -A FORWARD -s <%= vop["ipaddress"] %> -p tcp  -m state --state NEW -j ACCEPT
<% 
	  end
	end 
%>

## outgoing github (free for all)
iptables -A FORWARD -s $MASK_INTERNAL -p tcp --dport 22 -m state --state NEW -j ACCEPT
iptables -A FORWARD -s $MASK_INTERNAL -p tcp --dport 9418 -m state --state NEW -j ACCEPT

## outgoing smtp from VMs
iptables -A FORWARD -s $MASK_INTERNAL -p tcp --dport 25 -m state --state NEW -j ACCEPT
iptables -A FORWARD -s $MASK_INTERNAL -p tcp --dport 587 -m state --state NEW -j ACCEPT

## icmp forwarding for internal networks 
#iptables -A FORWARD -s $MASK_INTERNAL -p icmp -m state --state NEW -j ACCEPT
iptables -A FORWARD -p icmp -m state --state NEW -j ACCEPT

## dns forwarding for internal networks
iptables -A FORWARD -s $MASK_INTERNAL -p tcp --dport 53 -m state --state NEW -j ACCEPT
iptables -A FORWARD -s $MASK_INTERNAL -p udp --dport 53 -m state --state NEW -j ACCEPT

## LOG & DROP ##

iptables -A FORWARD -p tcp -m limit --limit 5/min -j LOG --log-level debug --log-prefix "!FORWARD__DROP! ** TCP **  "
iptables -A FORWARD -p udp -m limit --limit 5/min -j LOG --log-level debug --log-prefix "!FORWARD__DROP! ** UDP **  "
iptables -A FORWARD -p icmp -m limit --limit 5/min -j LOG --log-level debug --log-prefix "!FORWARD__DROP! ** ICMP **  "
iptables -A FORWARD -m pkttype --pkt-type multicast -m limit --limit 5/min -j LOG --log-level debug --log-prefix "!FORWARD__DROP! ** MCAST **  "

echo -relax and enjoy-
