description "adds or removes members from hostgroups by parsing and re-writing the configuration file"

param :machine

param! "name", "name of the hostgroup to be modified"
#param! "name", "name of the hostgroup to be modified", :lookup_method => lambda { |request, response|
#  @op.list_hostgroups("machine" => request.get_param_value("machine")).keys
#}

param "add", "new member(s) to add to the hostgroup", :allows_multiple_values => true
param "remove", "existing member(s) to remove from the group", :allows_multiple_values => true # TODO lookup

on_machine do |machine, params|
  old = machine.list_hostgroups
  
  raise "unknown hostgroup" unless old.has_key?(params["name"])
  
  group = old[params["name"]]
  raise "no members found in hostgroup definition" unless group.has_key?('members')
  
  members = group["members"].split(',')
  
  if params.has_key?('add')
    members << params["add"].join(',')
  end
  if params.has_key?('remove')
    params['remove'].each do |moriturus|
      members.delete moriturus
    end
  end
  
  group["members"] = members.join(',')
  
  hostgroup_file = [ config_string("config_root"), 'hostgroups.cfg' ].join('/')
  backup_file = "/tmp/hostgroups.bak.#{Time.now().strftime("%Y%m%d%H%M%S")}"
  machine.ssh("cp #{hostgroup_file} #{backup_file}")
  
  new_content = "# auto-generated by virtualop - there should be a backup in #{backup_file}\n\n"
  old.each do |name, group_content|
    new_content += "define hostgroup {\n"
    new_content += "  hostgroup_name\t#{name}\n"
    group_content.each do |k,v|
      new_content += "  #{k}\t#{v}\n"
    end
    new_content += "}\n\n"
  end
  
  machine.write_file('target_filename' => "#{hostgroup_file}.new", 'content' => new_content)
  new_content
end

